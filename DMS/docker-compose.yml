networks:
  app_network:
    driver: bridge

services:
  rest_api:
    image: rest_api_image
    build:
      context: .
      dockerfile: ./REST_API/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080/
    depends_on:
      - dms-db
      - rabbitmq
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    networks:
      - app_network

  dms-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: dmsuser
      POSTGRES_PASSWORD: dmspassword
      POSTGRES_DB: dmsdb
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app_network

  dal:
    image: dal_image
    build:
      context: .
      dockerfile: ./DAL/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DAL_CONNECTION_STRING=Host=dms-db;Port=5432;Database=dmsdb;Username=dmsuser;Password=dmspassword
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8081
    depends_on:
      - dms-db
    networks:
      - app_network

  webui:
    image: web_ui_image
    build:
      context: ./WebUI
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./WebUI/nginx.conf:/etc/nginx/nginx.conf  # Bind the Nginx configuration file
      - ./WebUI/wwwroot:/app/wwwroot  # Mount static files
    depends_on:
      - rest_api
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"    # RabbitMQ broker port
      - "15672:15672"  # RabbitMQ management UI port
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app_network

  ocr_worker:
    image: ocr_worker_image
    build:
      context: . 
      dockerfile: ./OcrProcessing/Dockerfile
    depends_on:
      - rabbitmq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./uploads:/app/uploads
    networks:
      - app_network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - app_network

volumes:
  db-data:
  minio-data:  
